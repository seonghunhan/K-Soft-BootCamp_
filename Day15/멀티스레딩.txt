

4, a 프로세스안에 스레드가 b,c,d,e병렬처리하고 있고 그 프로세스가 1번코어에 올라가면
나머지 2,3,4번 코어에 c,d,e를 나눠서 작업을 할 수 있다.



동시성, 병렬성 -> 챕터4 pdf의 18p (t는 task같지만 thread라고 생각, process, thread, task의 경계가 책마다 모호함



19페이지 
1번
-> ex) 책다운로드랑 책보여주기기능은 동시에 가능하지만 이것을 동시 task로 나누지 않으면
이용자는 책을 다운로드하면서 책을 볼 수 없다. -> 개발자가 동시에 작동할 수 있는지 고려해야함

3번
-> 다른 스레드가 동시에 같은 data에 접근을 한다면 충돌의 우려가 있다. 그렇기에 3번처럼해야함

4번
-> 글이 있어야 맞춤법 검사 기능이 동작함 그렇기에 맞춤범 검사 스레드는 글쓰는 테스크가 존재해야 동작함

5번
-> 당연한 말

---------------------------
22페이지
유저 스레드 
-> 유닉스 제공, OS가 해주는게 아닌 유저가 직접 짜기(우선순위, 스케줄링 등) 때문에 안정성이 떨어짐

커널 스레드
->

-------------------
23페이지
OS가 유절 스레드에 커널 스레드를 맵핑 시켜준다
ex ) 1개 커널스레드에 책다운, 책읽기 등 여러개의 스레드가 맵핑이 된다면 안되기때문에
many-to-one 모델은 거의 안쓰고 one-to-one이 가장 일반적인 모델 -> 대신 성능저하

요즘은 가전제품에도 os가 깔려있어서 그런 경우에 도통 m-to-m 채택,,?

----------------------------
30페이지
아까까지는 개발자가 어떻게든 처리가 가능했지만 이제부터는 개발자라고 해도 접근 불가

31페이지 ★★★★★★★★
이거 자바에서 쓴다
중간에 생성하지 않고 애초에 처음부터 스레드를 OS에서 만들어 놓음

33페이지
1-> 생성할때 리소스주고 없앨때 리소스반환하고 이거 반복하는것보다(새로 생성하는것) 낫다

웹서버는 보통 자바인데 웹서버에서 많이 사용함
사람들은 계속 왔다리 갔다리 하니깐 반환되는 리소스를 램한테 주지않고 자기가 가지고있다가
새로운 사람한테 할당해주겠다

-----------------------------
34페이지
하둡의 맵리듀스,,?

------------------
챕터5   17page 
CPU Scheduler 알고리즘

FCFS는 구현이 쉽다 -> 굉장히 많이 쓰임

18page
총 30초
p1 waiting시간 0
p2    "  24
p3   "   27
총 = 51/3 -> 평균 17초

19p
p2 , p3, p1순서로 왔다고 가정
총 30초
p2 waiting 시간 0
p3      "    3
p1     "     6
총 9/3 ->평균 3초
이것을 콘보이 효과라고 함 -> FCFS은 구현이 쉬워서 많이 쓰이고, 프로세스길이가 비슷할때는 괜찮
하지만 프로세스들의 길이가 너무 다를경우 FCFS는 사용하면 안된다!

20p
SJF (22p)참고














